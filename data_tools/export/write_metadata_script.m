function err = write_metadata_script(filename, metadata)
% write_metadata_script write a MATLAB script with basic info in config
%
% Usage: err = write_metadata_script(filename, metadata)
%
% Inputs:
% - filename [string]: pathname of MATLAB script to write
% - metadata [1x1 struct]: configuration structure as in result.config
%
% Output:
% - err [1x1 double]: error code (0 = success)
%
% See also dattes, export_metadata_script
%
% Copyright 2015 DATTES_Contributors <dattes@univ-eiffel.fr> .
% For more information, see the <a href="matlab: 
% web('https://gitlab.com/dattes/dattes/-/blob/main/LICENSE')">DATTES License</a>.

err = 0;

[D,F,E] = fileparts(filename);

%file extension must be '.m' (MATLAB code)
if ~isequal(E,'.m')
    fprintf('write_metadata_script: filename extension must be ".m"\n');
    return
end
%F must be a valid function name
if ~isvarname(F)
    fprintf('write_metadata_script: filename must be a valid variable name (see help isvarname)\n');
    return
end
fid = fopen(filename,'w+');

%TODO: ignore fields with same values than cfg_default

fprintf(fid,'function metadata = %s\n',F);
fprintf(fid,'%%Autogenerated script with write_metadata_script\n\n');

%first level (sections)
sections = fieldnames(metadata);

for ind_s = 1:length(sections)
 % comment section
fprintf(fid,'\n\n');
fprintf(fid,'%%%s\n',sections{ind_s});

fields = fieldnames(metadata.(sections{ind_s}));

for ind_f = 1:length(fields)
    name = sprintf('metadata.%s.%s',sections{ind_s},fields{ind_f});
    value = metadata.(sections{ind_s}).(fields{ind_f});
    if ischar(value)
        print_string(fid,name,value);
    elseif isnumeric(value)
        if isscalar(value)
            print_scalar(fid,name, value)
        elseif isvector(value)
            print_vector(fid,name,value)
        end
    elseif isa(value,'function_handle')
        print_func(fid,name,value);
    end    
end
end


%end of function
fprintf(fid,'end\n');
fclose(fid);
end

function print_string(fid,name,value)
fprintf(fid,"%s = '%s';\n",name,value);
end

function print_scalar(fid,name, value)
fprintf(fid,"%s = %g;\n",name,value);
end

function print_vector(fid,name,value)
fprintf(fid,"%s = [",name);
for ind = 1 :length(value)-1
fprintf(fid,"%g, ",value(ind));
end
fprintf(fid,"%g];\n",value(end));
end

function print_func(fid,name,value)
fprintf(fid,"%s = @%s;\n",name,func2str(value));
end
